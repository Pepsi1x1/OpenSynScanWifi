//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace OpenSynScanWifi.Properties {
    using System;
    
    
    /// <summary>
    ///   A strongly-typed resource class, for looking up localized strings, etc.
    /// </summary>
    // This class was auto-generated by the StronglyTypedResourceBuilder
    // class via a tool like ResGen or Visual Studio.
    // To add or remove a member, edit your .ResX file then rerun ResGen
    // with the /str option, or rebuild your VS project.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "16.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal partial class Resources {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal Resources() {
        }
        
        /// <summary>
        ///   Returns the cached ResourceManager instance used by this class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("OpenSynScanWifi.Properties.Resources", typeof(Resources).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Overrides the current thread's CurrentUICulture property for all
        ///   resource lookups using this strongly typed resource class.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Invalid handle..
        /// </summary>
        internal static string Arg_InvalidHandle {
            get {
                return ResourceManager.GetString("Arg_InvalidHandle", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Argument &apos;{2}&apos; must be between {0} and {1}..
        /// </summary>
        internal static string ArgumentOutOfRange_Bounds_Lower_Upper_Named {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_Bounds_Lower_Upper_Named", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Positive number required..
        /// </summary>
        internal static string ArgumentOutOfRange_NeedPosNum {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_NeedPosNum", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The path &apos;{0}&apos; is of an invalid length for use with domain sockets on this platform.  The length must be between 1 and {1} characters, inclusive..
        /// </summary>
        internal static string ArgumentOutOfRange_PathLengthInvalid {
            get {
                return ResourceManager.GetString("ArgumentOutOfRange_PathLengthInvalid", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Null is not a valid value for {0}..
        /// </summary>
        internal static string InvalidNullArgument {
            get {
                return ResourceManager.GetString("InvalidNullArgument", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation may only be performed when the buffer was set using the SetBuffer overload that accepts an array..
        /// </summary>
        internal static string InvalidOperation_BufferNotExplicitArray {
            get {
                return ResourceManager.GetString("InvalidOperation_BufferNotExplicitArray", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The result of the operation was already consumed and may not be used again..
        /// </summary>
        internal static string InvalidOperation_IncorrectToken {
            get {
                return ResourceManager.GetString("InvalidOperation_IncorrectToken", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Another continuation was already registered..
        /// </summary>
        internal static string InvalidOperation_MultipleContinuations {
            get {
                return ResourceManager.GetString("InvalidOperation_MultipleContinuations", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Buffer and BufferList properties cannot both be non-null..
        /// </summary>
        internal static string net_ambiguousbuffers {
            get {
                return ResourceManager.GetString("net_ambiguousbuffers", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The Buffer space specified by the Count property is insufficient for the AcceptAsync method..
        /// </summary>
        internal static string net_buffercounttoosmall {
            get {
                return ResourceManager.GetString("net_buffercounttoosmall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This operation cannot be performed on a completed asynchronous result object..
        /// </summary>
        internal static string net_completed_result {
            get {
                return ResourceManager.GetString("net_completed_result", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The AddressFamily {0} is not valid for the {1} end point, use {2} instead..
        /// </summary>
        internal static string net_InvalidAddressFamily {
            get {
                return ResourceManager.GetString("net_InvalidAddressFamily", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to None of the discovered or specified addresses match the socket address family..
        /// </summary>
        internal static string net_invalidAddressList {
            get {
                return ResourceManager.GetString("net_invalidAddressList", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The supplied EndPoint of AddressFamily {0} is not valid for this Socket, use {1} instead..
        /// </summary>
        internal static string net_InvalidEndPointAddressFamily {
            get {
                return ResourceManager.GetString("net_InvalidEndPointAddressFamily", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The supplied {0} is an invalid size for the {1} end point..
        /// </summary>
        internal static string net_InvalidSocketAddressSize {
            get {
                return ResourceManager.GetString("net_InvalidSocketAddressSize", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This protocol version is not supported..
        /// </summary>
        internal static string net_invalidversion {
            get {
                return ResourceManager.GetString("net_invalidversion", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot block a call on this socket while an earlier asynchronous call is in progress..
        /// </summary>
        internal static string net_invasync {
            get {
                return ResourceManager.GetString("net_invasync", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The IAsyncResult object was not returned from the corresponding asynchronous method on this class..
        /// </summary>
        internal static string net_io_invalidasyncresult {
            get {
                return ResourceManager.GetString("net_io_invalidasyncresult", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0} can only be called once for each asynchronous operation..
        /// </summary>
        internal static string net_io_invalidendcall {
            get {
                return ResourceManager.GetString("net_io_invalidendcall", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to read data from the transport connection: {0}..
        /// </summary>
        internal static string net_io_readfailure {
            get {
                return ResourceManager.GetString("net_io_readfailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to transfer data on the transport connection: {0}..
        /// </summary>
        internal static string net_io_readwritefailure {
            get {
                return ResourceManager.GetString("net_io_readwritefailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Timeout can be only be set to &apos;System.Threading.Timeout.Infinite&apos; or a value &gt; 0..
        /// </summary>
        internal static string net_io_timeout_use_gt_zero {
            get {
                return ResourceManager.GetString("net_io_timeout_use_gt_zero", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Unable to write data to the transport connection: {0}..
        /// </summary>
        internal static string net_io_writefailure {
            get {
                return ResourceManager.GetString("net_io_writefailure", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multiple buffers cannot be used with this method..
        /// </summary>
        internal static string net_multibuffernotsupported {
            get {
                return ResourceManager.GetString("net_multibuffernotsupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This stream does not support seek operations..
        /// </summary>
        internal static string net_noseek {
            get {
                return ResourceManager.GetString("net_noseek", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation is not allowed on non-connected sockets..
        /// </summary>
        internal static string net_notconnected {
            get {
                return ResourceManager.GetString("net_notconnected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation is not allowed on non-stream oriented sockets..
        /// </summary>
        internal static string net_notstream {
            get {
                return ResourceManager.GetString("net_notstream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to &apos;{0}&apos; Client can only accept InterNetwork or InterNetworkV6 addresses..
        /// </summary>
        internal static string net_protocol_invalid_family {
            get {
                return ResourceManager.GetString("net_protocol_invalid_family", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Multicast family is not the same as the family of the &apos;{0}&apos; Client..
        /// </summary>
        internal static string net_protocol_invalid_multicast_family {
            get {
                return ResourceManager.GetString("net_protocol_invalid_multicast_family", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The stream does not support writing..
        /// </summary>
        internal static string net_readonlystream {
            get {
                return ResourceManager.GetString("net_readonlystream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to An asynchronous socket operation is already in progress using this SocketAsyncEventArgs instance..
        /// </summary>
        internal static string net_socketopinprogress {
            get {
                return ResourceManager.GetString("net_socketopinprogress", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This platform does not support receiving data with Socket.AcceptAsync.  Instead, make a separate call to Socket.ReceiveAsync..
        /// </summary>
        internal static string net_sockets_accept_receive_notsupported {
            get {
                return ResourceManager.GetString("net_sockets_accept_receive_notsupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Asynchronous operations are not allowed on this socket. The underlying OS handle might have been already bound to an IO completion port..
        /// </summary>
        internal static string net_sockets_asyncoperations_notallowed {
            get {
                return ResourceManager.GetString("net_sockets_asyncoperations_notallowed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation is not allowed on a non-blocking Socket..
        /// </summary>
        internal static string net_sockets_blocking {
            get {
                return ResourceManager.GetString("net_sockets_blocking", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Sockets on this platform are invalid for use after a failed connection attempt..
        /// </summary>
        internal static string net_sockets_connect_multiconnect_notsupported {
            get {
                return ResourceManager.GetString("net_sockets_connect_multiconnect_notsupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Once the socket has been disconnected, you can only accept again asynchronously.  BeginAccept must be called on a thread that won&apos;t exit until the operation has been completed..
        /// </summary>
        internal static string net_sockets_disconnectedAccept {
            get {
                return ResourceManager.GetString("net_sockets_disconnectedAccept", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Once the socket has been disconnected, you can only reconnect again asynchronously, and only to a different EndPoint.  BeginConnect must be called on a thread that won&apos;t exit until the operation has been completed..
        /// </summary>
        internal static string net_sockets_disconnectedConnect {
            get {
                return ResourceManager.GetString("net_sockets_disconnectedConnect", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This platform does not support packet information for dual-mode sockets.  If packet information is not required, use Socket.Receive.  If packet information is required set Socket.DualMode to false..
        /// </summary>
        internal static string net_sockets_dualmode_receivefrom_notsupported {
            get {
                return ResourceManager.GetString("net_sockets_dualmode_receivefrom_notsupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This platform does not support Socket.DuplicateAndClose.  Instead, create a new socket..
        /// </summary>
        internal static string net_sockets_duplicateandclose_notsupported {
            get {
                return ResourceManager.GetString("net_sockets_duplicateandclose_notsupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to All lists are either null or empty..
        /// </summary>
        internal static string net_sockets_empty_select {
            get {
                return ResourceManager.GetString("net_sockets_empty_select", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameter {0} must not be of type DnsEndPoint..
        /// </summary>
        internal static string net_sockets_invalid_dnsendpoint {
            get {
                return ResourceManager.GetString("net_sockets_invalid_dnsendpoint", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The number of specified IP addresses has to be greater than 0..
        /// </summary>
        internal static string net_sockets_invalid_ipaddress_length {
            get {
                return ResourceManager.GetString("net_sockets_invalid_ipaddress_length", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified value is not a valid &apos;{0}&apos;..
        /// </summary>
        internal static string net_sockets_invalid_optionValue {
            get {
                return ResourceManager.GetString("net_sockets_invalid_optionValue", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified value is not valid..
        /// </summary>
        internal static string net_sockets_invalid_optionValue_all {
            get {
                return ResourceManager.GetString("net_sockets_invalid_optionValue_all", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified value for the socket information is invalid..
        /// </summary>
        internal static string net_sockets_invalid_socketinformation {
            get {
                return ResourceManager.GetString("net_sockets_invalid_socketinformation", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You must call the Bind method before performing this operation..
        /// </summary>
        internal static string net_sockets_mustbind {
            get {
                return ResourceManager.GetString("net_sockets_mustbind", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You must call the Listen method before performing this operation..
        /// </summary>
        internal static string net_sockets_mustlisten {
            get {
                return ResourceManager.GetString("net_sockets_mustlisten", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The socket must not be bound or connected..
        /// </summary>
        internal static string net_sockets_mustnotbebound {
            get {
                return ResourceManager.GetString("net_sockets_mustnotbebound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to You may not perform this operation after calling the Listen method..
        /// </summary>
        internal static string net_sockets_mustnotlisten {
            get {
                return ResourceManager.GetString("net_sockets_mustnotlisten", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to {0}: The socket must not be bound or connected..
        /// </summary>
        internal static string net_sockets_namedmustnotbebound {
            get {
                return ResourceManager.GetString("net_sockets_namedmustnotbebound", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The operation is not allowed on objects of type {0}. Use only objects of type {1}..
        /// </summary>
        internal static string net_sockets_select {
            get {
                return ResourceManager.GetString("net_sockets_select", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The FileStream must have been opened for asynchronous reading and writing..
        /// </summary>
        internal static string net_sockets_sendpackelement_FileStreamMustBeAsync {
            get {
                return ResourceManager.GetString("net_sockets_sendpackelement_FileStreamMustBeAsync", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The {0} list contains too many items; a maximum of {1} is allowed..
        /// </summary>
        internal static string net_sockets_toolarge_select {
            get {
                return ResourceManager.GetString("net_sockets_toolarge_select", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to This platform does not support TransmitFileOptions other than TransmitFileOptions.UseDefaultWorkerThread..
        /// </summary>
        internal static string net_sockets_transmitfileoptions_notsupported {
            get {
                return ResourceManager.GetString("net_sockets_transmitfileoptions_notsupported", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Use the Blocking property to change the status of the Socket..
        /// </summary>
        internal static string net_sockets_useblocking {
            get {
                return ResourceManager.GetString("net_sockets_useblocking", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to A ValueTask returned from an asynchronous socket operation was consumed concurrently. ValueTasks must only ever be awaited once. (Id: {0})..
        /// </summary>
        internal static string net_sockets_valuetaskmisuse {
            get {
                return ResourceManager.GetString("net_sockets_valuetaskmisuse", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The parameter {0} must contain one or more elements..
        /// </summary>
        internal static string net_sockets_zerolist {
            get {
                return ResourceManager.GetString("net_sockets_zerolist", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Not listening. You must call the Start() method before calling this method..
        /// </summary>
        internal static string net_stopped {
            get {
                return ResourceManager.GetString("net_stopped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The TcpListener must not be listening before performing this operation..
        /// </summary>
        internal static string net_tcplistener_mustbestopped {
            get {
                return ResourceManager.GetString("net_tcplistener_mustbestopped", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot send packets to an arbitrary host while connected..
        /// </summary>
        internal static string net_udpconnected {
            get {
                return ResourceManager.GetString("net_udpconnected", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The specified value cannot be negative..
        /// </summary>
        internal static string net_value_cannot_be_negative {
            get {
                return ResourceManager.GetString("net_value_cannot_be_negative", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to The stream does not support reading..
        /// </summary>
        internal static string net_writeonlystream {
            get {
                return ResourceManager.GetString("net_writeonlystream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stream does not support reading..
        /// </summary>
        internal static string NotSupported_UnreadableStream {
            get {
                return ResourceManager.GetString("NotSupported_UnreadableStream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Stream does not support writing..
        /// </summary>
        internal static string NotSupported_UnwritableStream {
            get {
                return ResourceManager.GetString("NotSupported_UnwritableStream", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Cannot access a closed stream..
        /// </summary>
        internal static string ObjectDisposed_StreamClosed {
            get {
                return ResourceManager.GetString("ObjectDisposed_StreamClosed", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Accepting into an existing Socket is not supported on this platform..
        /// </summary>
        internal static string PlatformNotSupported_AcceptSocket {
            get {
                return ResourceManager.GetString("PlatformNotSupported_AcceptSocket", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to Socket.IOControl handles Windows-specific control codes and is not supported on this platform..
        /// </summary>
        internal static string PlatformNotSupported_IOControl {
            get {
                return ResourceManager.GetString("PlatformNotSupported_IOControl", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Looks up a localized string similar to IP protection level cannot be controlled on this platform..
        /// </summary>
        internal static string PlatformNotSupported_IPProtectionLevel {
            get {
                return ResourceManager.GetString("PlatformNotSupported_IPProtectionLevel", resourceCulture);
            }
        }
    }
}
